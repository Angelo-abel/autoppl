# Project Configuration

# C++ Project
language: cpp

dist: trusty
sudo: required

# Build Job Matrix

stages:
  - test
  - name: deploy
    if: branch = master

jobs:
    include:

        # Valgrind
        - stage: test
          os: linux
          compiler: gcc
          addons:
              apt:
                  sources: ['ubuntu-toolchain-r-test']
                  packages: ['g++-7', 'cmake', 'ninja-build', 'valgrind', 
                             'libopenblas-dev', 'liblapack-dev',
                             'libarpack2-dev']
          env:
              - CXX_COMPILER="g++-7"
              - CC_COMPILER="gcc-7"
              - CTEST_OPTIONS="-T memcheck"
              - VALGRIND="ON"

        # Coveralls
        - stage: test
          os: linux
          compiler: gcc
          addons:
              apt:
                  sources: ['ubuntu-toolchain-r-test']
                  packages: ['g++-7', 'cmake', 'ninja-build',
                             'libopenblas-dev', 'liblapack-dev',
                             'libarpack2-dev']
          before_install:
              - sudo -H pip install --upgrade requests[security]
              - pip install --user cpp-coveralls
          after_success:
              - >
                coveralls 
                --root ../../ 
                --build-root ./ 
                --include include 
                --exclude lib
                --gcov 'gcov-7' 
                --gcov-options '\-lp'
          env:
              - CXX_COMPILER="g++-7"
              - CC_COMPILER="gcc-7"
              - COVERALL="ON"
              - CMAKE_OPTIONS="-DAUTOPPL_ENABLE_TEST_COVERAGE=ON"

        # Linux/GCC>=5

        - stage: test
          os: linux
          compiler: gcc
          env:
              - CXX_COMPILER="g++-7"
              - CC_COMPILER="gcc-7"
          addons:
            apt:
              sources: ['ubuntu-toolchain-r-test']
              packages: ['g++-7', 'ninja-build',
                         'libopenblas-dev', 'liblapack-dev',
                         'libarpack2-dev']

        - os: linux
          compiler: gcc
          env: 
              - CXX_COMPILER="g++-8"
              - CC_COMPILER="gcc-8"
          addons:
            apt:
              sources: ['ubuntu-toolchain-r-test']
              packages: ['g++-8', 'ninja-build',
                         'libopenblas-dev', 'liblapack-dev',
                         'libarpack2-dev']

        - stage: test
          os: linux
          compiler: gcc
          env: 
              - CXX_COMPILER="g++-9"
              - CC_COMPILER="gcc-9"
          addons:
            apt:
              sources: ['ubuntu-toolchain-r-test']
              packages: ['g++-9', 'ninja-build',
                         'libopenblas-dev', 'liblapack-dev',
                         'libarpack2-dev']

        - stage: test
          dist: bionic
          os: linux
          compiler: gcc
          env: 
              - CXX_COMPILER="g++-10"
              - CC_COMPILER="gcc-10"
              - CMAKE_OPTIONS="-DCMAKE_CXX_FLAGS=-std=c++20"
          addons:
            apt:
              sources: ['ubuntu-toolchain-r-test']
              packages: ['g++-10', 'ninja-build',
                         'libopenblas-dev', 'liblapack-dev',
                         'libarpack2-dev']

        - stage: deploy
          dist: bionic
          os: linux
          compiler: gcc
          addons:
            apt:
              sources: ['ubuntu-toolchain-r-test']
              packages: ['g++-9', 'libstdc++6', 'build-essential']

          script: 
            - wget http://doxygen.nl/files/doxygen-1.8.20.linux.bin.tar.gz
            - tar -xvf doxygen-1.8.20.linux.bin.tar.gz
            - doxygen-1.8.20/bin/doxygen -v
            - doxygen-1.8.20/bin/doxygen docs/doxygen/Doxyfile
            - rm -r doxygen-1.8.20 doxygen-1.8.20.linux.bin.tar.gz

          deploy:
            provider: pages
            skip_cleanup: true
            local_dir: docs/doxygen/html
            github_token: $GH_PAGES_TOKEN
            target_branch: gh-pages
            on:
              branch: master

# Build Script
script:

    # set CXX to correct compiler
    - if [[ "${CXX_COMPILER}" != "" ]]; then
        export CXX=${CXX_COMPILER};
        export CC=${CC_COMPILER};
      fi 

    # show OS/compiler/cmake version
    - uname -a
    - ${CXX} --version
    - ${CC} --version
    - cmake --version

    # setup, clean build, and test
    - ./setup.sh
    - >
      ./clean-build.sh 
      release
      ${CMAKE_OPTIONS} 
      -DAUTOPPL_ENABLE_BENCHMARK=OFF 
      -DAUTOPPL_ENABLE_TEST=ON
      -DAUTOPPL_ENABLE_EXAMPLE=ON
    - cd build/release
    - ctest ${CTEST_OPTIONS} -j12

    # if testing valgrind
    - if [[ "${VALGRIND}" == "ON" ]]; then
        cat ./Testing/Temporary/MemoryChecker.*.log;
      fi
